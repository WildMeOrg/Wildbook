/* eslint-disable no-restricted-globals */
/* eslint-disable no-undef */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";
import { NetworkFirst } from "workbox-strategies";

console.log("Service worker running");

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

registerRoute(
  // ({url}) => true,
  () => true,
  new NetworkFirst(),
);

// self.addEventListener('fetch', function(event) {
//   event.respondWith(
//     caches.match(event.request).then(function(cachedResponse) {
//       if (cachedResponse) {
//         // Check if the response is expired.
//         const isExpired = isResponseExpired(cachedResponse);
//         // If the response is expired, fetch and update the cache.
//         if (isExpired) {
//           return fetchAndUpdateCache(event.request);
//         } else {
//           // If the response is not expired, return it from the cache.
//           return cachedResponse;
//         }
//       } else {
//         // If the request is not in the cache, fetch and update the cache.
//         return fetchAndUpdateCache(event.request);
//       }
//     })
//   );
// });
// // This function checks if the response is expired.
// function isResponseExpired(response) {
//   // Check if the Cache-Control header is set to no-cache.
//   if (!response.headers.has('Cache-Control') && !response.headers.has('Expires')) {
//     return true;
//   }

//   // Check if the Cache-Control header is set to no-cache or no-store.
//   const cacheControl = response.headers.get('Cache-Control');
//   // If the Cache-Control header is set to no-cache or no-store, return true.
//   if (cacheControl) {
//     if (/(no-cache|no-store)/.test(cacheControl)) {
//       return true;
//     }
//     // Check if the Cache-Control header is set to max-age.
//     const maxAgeMatch = cacheControl.match(/max-age=(\d+)/);
//     // If the Cache-Control header is set to max-age, check if the response is expired.
//     // If the response is expired, return true.
//     if (maxAgeMatch) {
//       const maxAge = parseInt(maxAgeMatch[1], 10);
//       const dateHeader = response.headers.get('Date');
//       const age = dateHeader ? (Date.now() - new Date(dateHeader).getTime()) / 1000 : 0;
//       return age > maxAge;
//     }
//   }
//   // Check if the Expires header is set and if the response is expired.
//   const expires = response.headers.get('Expires');
//   // If the Expires header is set, check if the response is expired.
//   if (expires) {
//     return Date.now() > new Date(expires).getTime();
//   }

//   return false;
// }
// // This function fetches the request and updates the cache.
// function fetchAndUpdateCache(request) {
//   return fetch(request).then(function(response) {
//     return caches.open('your-cache-name').then(function(cache) {
//       cache.put(request, response.clone());
//       return response;
//     });
//   });
// }

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
